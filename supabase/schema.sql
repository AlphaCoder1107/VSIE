-- Supabase schema for VIC applications
-- Run in Supabase SQL Editor

create table if not exists public.applications (
  id bigint generated by default as identity primary key,
  application_code text,
  client_ref text,
  startup_name text not null,
  pitch text,
  problem text,
  solution text,
  stage text,
  industry text[],
  target_customer text,
  support_needed text[],
  founders jsonb,
  attachments jsonb,
  fee_paid boolean default false,
  fee_txn_id text,
  status text default 'submitted',
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create sequence if not exists application_sequence start 1;

create or replace function public.generate_application_code()
returns text language sql as $$
  select 'VIC' || to_char(current_date,'YYYY') || '-' || lpad(nextval('application_sequence')::text,6,'0');
$$;

create or replace function public.set_application_code()
returns trigger as $$
begin
  new.application_code := public.generate_application_code();
  new.updated_at := now();
  return new;
end;
$$ language plpgsql;

create trigger trg_set_app_code
before insert on public.applications
for each row execute function public.set_application_code();

create table if not exists public.attachments (
  id bigint generated by default as identity primary key,
  application_id bigint references public.applications(id) on delete cascade,
  type text,
  storage_path text,
  file_name text,
  size_kb int,
  uploaded_at timestamptz default now()
);

create index if not exists idx_applications_status on public.applications(status);
create index if not exists idx_applications_created on public.applications(created_at desc);
create index if not exists idx_applications_client_ref on public.applications(client_ref);

-- Seminar registrations: sequence, code generator, table, trigger
-- 1) sequence to generate registration numbers
create sequence if not exists seminar_sequence start 1;

-- 2) function to generate code like: VIC-SEM-2025-000123
create or replace function public.generate_seminar_code()
returns text language sql as $$
  select 'VIC-SEM-' || to_char(current_date,'YYYY') || '-' || lpad(nextval('seminar_sequence')::text,6,'0');
$$;

-- 3) table: seminar_registrations
create table if not exists public.seminar_registrations (
  id bigint generated by default as identity primary key,
  registration_code text unique,
  event_slug text not null,
  student_name text not null,
  student_email text not null,
  student_phone text,
  college text,
  year text,
  razorpay_order_id text,
  razorpay_payment_id text,
  razorpay_signature text,
  amount_paise int default 1000,
  status text default 'paid',
  created_at timestamptz default now()
);

-- 4) trigger function to set registration_code automatically
create or replace function public.set_registration_code()
returns trigger as $$
begin
  if new.registration_code is null then
    new.registration_code := public.generate_seminar_code();
  end if;
  new.created_at := now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists trg_set_registration_code on public.seminar_registrations;
create trigger trg_set_registration_code
before insert on public.seminar_registrations
for each row execute function public.set_registration_code();
